modules:
  - .contrato
  - num2words
---
objects:
#  - parte_1: DADict
#  - parte1_miembros: DAList
#  - tipos: DAList
  - member: Individual
  - individuo_principal_parte_1: Individual
  - individuo_principal_parte_2: Individual
  - individuo_pareja_parte_1: Pareja
  - individuo_pareja_parte_2: Pareja
  - enser_o_propiedad_mueble: |
      DAList.using(
        object_type=Thing)
---
code: |
  tipos_lista = {"ind":'Individuo',"corp":"Corporación o Sociedad","suc": "Suceciones", "cap": "Capitulaciones","bp":"Bien privativo"}
#  tipos = ["Individuo","Corporación o Sociedad", "Suceciones", "Capitulaciones","Bien privativo"]
#  parte_1['tipo'] = tipos[0]
#  parte_1['estado_civil']=["Casados", "Soltero"]
#  parte_1['miembros'] = parte1_miembros
#  parte1_miembros.appendObject(Individual)
#  parte1_miembros.gathered = True
---
mandatory: True
question: |
  Naturaleza de la parte I 
fields:
  - Tipo primera parte: parte1_tipo
    code: |
      tipos_lista
continue button field: natu_parte1_ok
---
mandatory: True
question: |
  Naturaleza de la parte II
fields:
  - Tipo segunda parte: parte2_tipo
    code: |
      tipos_lista
continue button field: natu_parte2_ok
---
Initial: True
# mandatory: True
code: |
    if parte1_tipo == "ind":
        parte1_casados = individuo_principal_parte_1.estatus == "Casado"
        parte1_masculino = individuo_principal_parte_1.genero == "Masculino"
        parte1_denominada = "os" if parte1_casados else "o" if parte1_masculino else "a" 
        parte1_genero = "o" if parte1_masculino else "a"
        
        miembros_parte1 = individuo_principal_parte_1.name.full() + (
            " y "
            + individuo_pareja_parte_1.name.full()
            + ", ambos mayores de edad, casados entre sí y residentes de   "
            + individuo_principal_parte_1.ciudad
            + ", "
            + individuo_principal_parte_1.pais
            if individuo_principal_parte_1.estatus == "Casado"
            else ", mayor de edad, solter"+parte1_genero+" y residente de "
            + individuo_principal_parte_1.ciudad
            + ", "
            + individuo_principal_parte_1.pais
        )
        
        miembros_parte1_en = individuo_principal_parte_1.name.full() + (
            " y "
            + individuo_pareja_parte_1.name.full()
            + ", both of legal age, married to each other and residents of  "
            + individuo_principal_parte_1.ciudad
            + ", "
            + individuo_principal_parte_1.pais
            if individuo_principal_parte_1.estatus == "Casado"
            else ", of legal age, single and resident of "
            + individuo_principal_parte_1.ciudad
            + ", "
            + individuo_principal_parte_1.pais
        )
    
        miembros_parte1_principal = individuo_principal_parte_1.name.full()
    
        if individuo_principal_parte_1.estatus == "Casado":
            miembros_parte1_pareja = individuo_pareja_parte_1.name.full()
    
    if parte2_tipo == "ind":
        parte2_casados = individuo_principal_parte_2.estatus == "Casado"
        parte2_masculino = individuo_principal_parte_2.genero == "Masculino"
        parte2_denominada = "os" if parte2_casados else "o" if parte2_masculino else "a"
        parte2_genero = "o" if parte2_masculino else "a"
        
        miembros_parte2 = individuo_principal_parte_2.name.full() + (
            " y "
            + individuo_pareja_parte_2.name.full()
            + ", ambos mayores de edad, casados entre sí y residentes de   "
            + individuo_principal_parte_2.ciudad
            + ", "
            + individuo_principal_parte_2.pais
            if individuo_principal_parte_2.estatus == "Casado"
            else ", mayor de edad, solter"+parte2_genero+" y residente de "
            + individuo_principal_parte_2.ciudad
            + ", "
            + individuo_principal_parte_2.pais
        )
    
        miembros_parte2_en = individuo_principal_parte_2.name.full() + (
            " & "
            + individuo_pareja_parte_2.name.full()
            + ", both of legal age, married to each other and residents of  "
            + individuo_principal_parte_2.ciudad
            + ", "
            + individuo_principal_parte_2.pais
            if individuo_principal_parte_2.estatus == "Casado"
            else ", of legal age, single and resident of "
            + individuo_principal_parte_2.ciudad
            + ", "
            + individuo_principal_parte_2.pais
        )
    
        miembros_parte2_principal = individuo_principal_parte_2.name.full()
    
        if individuo_principal_parte_2.estatus == "Casado":
            miembros_parte2_pareja = individuo_pareja_parte_2.name.full()


---
question: | 
 Resumen de las partes:
 De la primera parte: ${ miembros_parte1 }
 </br>
 De la segunda parte: ${ miembros_parte2 }
#buttons:
#  - Salir: exit
#  - Empezar de nuevo: restart
continue button field: resumen_presentado
mandatory: True
---
mandatory: True
question: |
  Información de la transacción
subquestion: |
  Entre la dirección completa y demás información
fields:
  - Dirección propiedad: direccion_propiedad
  - Número de catastro: num_catastro
  - Precio de compraventa: precio_compraventa
    datatype: currency
    min: 1
  - Depósito comprador: deposito_comprador
    datatype: currency
    min: 1
  - Periodo opción(en meses): periodo_opcion
    datatype: integer
  - Dirección postal vendedor: direccion_vendedor
continue button field: info_transaccion_entrada
---
mandatory: True
code: |
  precio_compraventa_palabras = num2words(precio_compraventa, lang='es').upper()
  precio_compraventa_palabras_en = num2words(precio_compraventa, lang='en').upper()
  deposito_comprador_palabras = num2words(deposito_comprador, lang='es').upper()
  deposito_comprador_palabras_en = num2words(deposito_comprador, lang='en').upper()
  saldo_restante = precio_compraventa - deposito_comprador
  saldo_restante_palabras = num2words(saldo_restante, lang='es').upper()
  saldo_restante_palabras_en = num2words(saldo_restante, lang='en').upper()
#  enser_o_propiedad_mueble.there_is_another = None
---
mandatory: True
question: |
  Hay enseres o propiedad mueble?
yesno: enser_o_propiedad_mueble.there_are_any

---
mandatory: True
question: |
  Resumen de enser o propiedad mueble
subquestion: |
  % if len(enser_o_propiedad_mueble)==0:
  No hay enser o propiedad mueble
  % else:
  % for e in enser_o_propiedad_mueble:
  * ${e.cantidad} ${e.descripcion}/${e.descripcion_en} 
  % endfor
  % endif
continue button field: resumen_enser_visto
---      
question: |
  Información ${enser_o_propiedad_mueble.object_name()}
fields:
  - Name: enser_o_propiedad_mueble[i].name.text
    input type: hidden
  - Cantidad: enser_o_propiedad_mueble[i].cantidad
  - Descripción (español): enser_o_propiedad_mueble[i].descripcion
  - Descripción (inglés): enser_o_propiedad_mueble[i].descripcion_en

---
question: |
  Añadir otro ${enser_o_propiedad_mueble.object_name()}?
yesno: enser_o_propiedad_mueble.there_is_another
---  
generic object: Individual
question: |
  ${ capitalize(x.object_name()) }:
fields:
  - Nombre: x.name.first
  - Apellidos: x.name.last
  - Género: x.genero
    input type: radio
    choices:
     - Femenino
     - Masculino
     - No binario
  - Estatus civil: x.estatus
    input type: radio
    choices:
     - Soltero
     - Casado
  - Ciudad residencia: x.ciudad
  - Pais residencia: x.pais
---
generic object: Pareja
question: |
  ${ capitalize(x.object_name()) }:
fields:
  - Nombre: x.name.first
  - Género: x.genero
    input type: radio
    choices:
     - Femenino
     - Masculino
     - No binario
---
question: |
    Fecha de deposito recibido:
fields:
  - Fecha: fecha_deposito
    datatype: date
continue button field: fecha_deposito_ok
mandatory: True
---
question: Ahi tiene el documento
event: some_event
attachment:
  - name: Contrato de Opcion
    filename: contrato_opcion
    docx template file: contrato_opcion_v2.docx
    
mandatory: true
---